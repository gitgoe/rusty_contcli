use futures::future::Future;
use std::boxed::Box;
use std::pin::Pin;

fn receives_closure<F>(closure: F)
where
    F: Fn(i32) -> i32,
{
    let result = closure(1);
    println!("closure(1) => {}", result);
}

fn receives_boxed_closure(boxed_closure: Box<dyn Fn(i32) -> i32>) {
    let result = boxed_closure(1);
    println!("boxed_closure(1) => {}", result);
}


async fn receives_future<F>(future: F)
where
    F: Future<Output = i32>
{
    let result = future.await;
    println!("future.await => {}", result);
}

async fn receives_boxed_future(boxed_future: Pin<Box<dyn Future<Output = i32>>>) {
    let result = boxed_future.await;
    println!("boxed_future.await => {}", result);
}

fn simple_closure(boxed_closure: Box<dyn Fn(Vec<i32>) -> i32>) {
    let result = boxed_closure(vec![5,6,7]);
    println!("boxed_closure(1) => {}", result);
}

#[tokio::main]
async fn main() {
    receives_closure(|x| x + 1);
    receives_boxed_closure(Box::new(|x| x + 1));
    receives_future(async { 42 }).await;
    receives_boxed_future(Box::pin(async { 42 })).await;
    simple_closure(Box::new(|x| x.len() as i32));
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
async fn get_stuff(arg: usize) -> usize {
    arg * 2
}

async fn do_it_in_parallel(args: Vec<usize>) -> Vec<usize> {
    let futures: Vec<_> = args
        .into_iter()
        .map(|arg| tokio::spawn(get_stuff(arg)))
        .collect();

    // do these futures in parallel and return them
    let mut res = Vec::with_capacity(futures.len());
    for f in futures.into_iter() {
        res.push(f.await.unwrap());
    }
    res
}

#[tokio::main]
async fn main() {
    let args = (0..100).collect();
    let results = do_it_in_parallel(args).await;
    println!("{results:?}");
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

use futures::future::Future;
use std::boxed::Box;
use std::pin::Pin;

fn receives_closure<F>(closure: F)
where
    F: Fn(i32) -> i32,
{
    let result = closure(1);
    println!("closure(1) => {}", result);
}

fn receives_boxed_closure(boxed_closure: Box<dyn Fn(i32) -> i32>) {
    let result = boxed_closure(1);
    println!("boxed_closure(1) => {}", result);
}


async fn receives_future<F>(future: F)
where
    F: Future<Output = i32>
{
    let result = future.await;
    println!("future.await => {}", result);
}

async fn receives_boxed_future(boxed_future: Pin<Box<dyn Future<Output = i32>>>) {
    let result = boxed_future.await;
    println!("boxed_future.await => {}", result);
}

fn simple_closure(boxed_closure: Box<dyn Fn(Vec<i32>) -> i32>) {
    let result = boxed_closure(vec![5,6,7]);
    println!("boxed_closure(1) => {}", result);
}

#[tokio::main]
async fn main() {
    receives_closure(|x| x + 1);
    receives_closure(|x| x + 1);
    receives_boxed_closure(Box::new(|x| x + 1));
    receives_future(async { 42 }).await;
    receives_boxed_future(Box::pin(async { 42 })).await;
    simple_closure(Box::new(|x| x.len() as i32));
}
